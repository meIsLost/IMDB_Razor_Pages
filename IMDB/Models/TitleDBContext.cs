// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RazorPages_IMDB.Models
{
    public partial class TitleDBContext : DbContext
    {
        public TitleDBContext()
        {
        }

        public TitleDBContext(DbContextOptions<TitleDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DirectorForTitle> DirectorForTitles { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Name> Names { get; set; }
        public virtual DbSet<NameKnownForTitle> NameKnownForTitles { get; set; }
        public virtual DbSet<NamePrimaryProfession> NamePrimaryProfessions { get; set; }
        public virtual DbSet<PrimaryProfession> PrimaryProfessions { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<TitleGenre> TitleGenres { get; set; }
        public virtual DbSet<TitleType> TitleTypes { get; set; }
        public virtual DbSet<WriterForTitle> WriterForTitles { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=ZORO;Initial Catalog=TitleDB;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DirectorForTitle>(entity =>
            {
                entity.HasKey(e => e.DirectorForTitlesId)
                    .HasName("PK__Director__32732BAB366CAAA9");

                entity.HasOne(d => d.NconstNavigation)
                    .WithMany(p => p.DirectorForTitles)
                    .HasForeignKey(d => d.Nconst)
                    .HasConstraintName("FK_DirectorForTitles_Names");

                entity.HasOne(d => d.TconstNavigation)
                    .WithMany(p => p.DirectorForTitles)
                    .HasForeignKey(d => d.Tconst)
                    .HasConstraintName("FK_DirectorForTitles_titles");
            });

            modelBuilder.Entity<Name>(entity =>
            {
                entity.HasKey(e => e.Nconst)
                    .HasName("PK__names__49B947A550AF98C3");
            });

            modelBuilder.Entity<NameKnownForTitle>(entity =>
            {
                entity.HasKey(e => e.NameKnownForTitlesId)
                    .HasName("PK__NameKnow__2959386147A9BCD5");

                entity.HasOne(d => d.NconstNavigation)
                    .WithMany(p => p.NameKnownForTitles)
                    .HasForeignKey(d => d.Nconst)
                    .HasConstraintName("FK_NameKnownForTitles_Names");

                entity.HasOne(d => d.TconstNavigation)
                    .WithMany(p => p.NameKnownForTitles)
                    .HasForeignKey(d => d.Tconst)
                    .HasConstraintName("FK_NameKnownForTitles_titles");
            });

            modelBuilder.Entity<NamePrimaryProfession>(entity =>
            {
                entity.HasOne(d => d.NconstNavigation)
                    .WithMany(p => p.NamePrimaryProfessions)
                    .HasForeignKey(d => d.Nconst)
                    .HasConstraintName("FK_NamePrimaryProfessions_names");

                entity.HasOne(d => d.PrimaryProfession)
                    .WithMany(p => p.NamePrimaryProfessions)
                    .HasForeignKey(d => d.PrimaryProfessionId)
                    .HasConstraintName("FK_NamePrimaryProfessions_PrimaryProfessions");
            });

            modelBuilder.Entity<Title>(entity =>
            {
                entity.HasKey(e => e.Tconst)
                    .HasName("PK__Titles__85FD5344A9891D18");

                entity.HasOne(d => d.TitleType)
                    .WithMany(p => p.Titles)
                    .HasForeignKey(d => d.TitleTypeId)
                    .HasConstraintName("FK__Titles__titleTyp__286302EC");
            });

            modelBuilder.Entity<TitleGenre>(entity =>
            {
                entity.HasOne(d => d.Genre)
                    .WithMany(p => p.TitleGenres)
                    .HasForeignKey(d => d.GenreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TitleGenr__genre__2B3F6F97");

                entity.HasOne(d => d.TconstNavigation)
                    .WithMany(p => p.TitleGenres)
                    .HasForeignKey(d => d.Tconst)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TitleGenr__tcons__2C3393D0");
            });

            modelBuilder.Entity<WriterForTitle>(entity =>
            {
                entity.HasKey(e => e.WriterForTitlesId)
                    .HasName("PK__WriterFo__43C15097331F4BF4");

                entity.HasOne(d => d.NconstNavigation)
                    .WithMany(p => p.WriterForTitles)
                    .HasForeignKey(d => d.Nconst)
                    .HasConstraintName("FK_WriterForTitles_Names");

                entity.HasOne(d => d.TconstNavigation)
                    .WithMany(p => p.WriterForTitles)
                    .HasForeignKey(d => d.Tconst)
                    .HasConstraintName("FK_WriterForTitles_titles");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}